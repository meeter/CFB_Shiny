xsum[names(xmax)] = xmax
}
}
o.cell.padding = circos.par("cell.padding")
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initialize(factors = factor(cate, levels = cate),
xlim = cbind(rep(0, length(xsum)), xsum))
if (!is.null(preAllocateTracks)) {
pa = parsePreAllocateTracksValue(preAllocateTracks)
for (i in seq_along(pa)) {
va = pa[[i]]
circos.trackPlotRegion(ylim = va$ylim, track.height = va$track.height,
bg.col = va$bg.col, bg.border = va$bg.border,
bg.lty = va$bg.lty, bg.lwd = va$bg.lwd, track.margin = va$track.margin)
}
}
if ("name" %in% annotationTrack) {
circos.trackPlotRegion(ylim = c(0, 1), bg.border = NA,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
current.sector.index = get.cell.meta.data("sector.index")
i = get.cell.meta.data("sector.numeric.index")
circos.text(mean(xlim), 0.9, labels = current.sector.index,
cex = 0.8, facing = "inside", niceFacing = TRUE,
adj = c(0.5, 0))
}, track.height = annotationTrackHeight[which(annotationTrack %in%
"name")])
}
if ("grid" %in% annotationTrack) {
circos.trackPlotRegion(ylim = c(0, 1), bg.border = NA,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
current.sector.index = get.cell.meta.data("sector.index")
if (is.null(grid.border)) {
border.col = grid.col[current.sector.index]
}
else {
border.col = grid.border
}
circos.rect(xlim[1], 0, xlim[2], 1, col = grid.col[current.sector.index],
border = border.col)
if ("axis" %in% annotationTrack) {
circos.axis("top", labels.cex = 0.5)
}
}, track.height = annotationTrackHeight[which(annotationTrack %in%
"grid")])
}
rou = get_most_inside_radius()
rou1 = numeric(nr)
rou2 = numeric(nr)
for (i in seq_len(nr)) {
if (directional[i]) {
if (grepl("diffHeight", direction.type[i])) {
if (directional[i] == 1) {
if (diffHeight > 0) {
rou1[i] = rou - diffHeight
rou2[i] = rou
}
else {
rou1[i] = rou
rou2[i] = rou + diffHeight
}
}
else if (directional[i] == -1) {
if (diffHeight > 0) {
rou1[i] = rou
rou2[i] = rou - diffHeight
}
else {
rou1[i] = rou + diffHeight
rou2[i] = rou
}
}
else if (directional[i] == 2) {
if (diffHeight > 0) {
rou1[i] = rou - diffHeight
rou2[i] = rou - diffHeight
}
else {
rou1[i] = rou + diffHeight
rou2[i] = rou + diffHeight
}
}
}
else {
rou1[i] = rou
rou2[i] = rou
}
}
else {
rou1[i] = rou
rou2[i] = rou
}
}
if (link.largest.ontop) {
link_order = order(abs(df$value), decreasing = FALSE)
}
else {
link_order = order(link.rank)
}
for (k in link_order) {
if (abs(df$value[k])/sum(abs(df$value)) < 1e-06)
next
if (link.visible[k]) {
if (setequal(direction.type, c("diffHeight"))) {
circos.link(df$rn[k], c(df$x1[k] - abs(df$value[k]),
df$x1[k]), df$cn[k], c(df$x2[k] - abs(df$value[k]),
df$x2[k]), directional = 0, col = col[k], rou1 = rou1[k],
rou2 = rou2[k], border = link.border[k], lwd = link.lwd[k],
lty = link.lty[k], ...)
}
else if (grepl("arrows", direction.type[k])) {
circos.link(df$rn[k], c(df$x1[k] - abs(df$value[k]),
df$x1[k]), df$cn[k], c(df$x2[k] - abs(df$value[k]),
df$x2[k]), directional = directional[k], col = col[k],
rou1 = rou1[k], rou2 = rou2[k], border = link.border[k],
lwd = link.lwd[k], lty = link.lty[k], arr.length = link.arr.length[k],
arr.width = link.arr.width[k], arr.type = link.arr.type[k],
arr.col = link.arr.col[k], arr.lty = link.arr.lty[k],
arr.lwd = link.arr.lwd[k], ...)
}
}
}
df$col = col
circos.par(cell.padding = o.cell.padding)
return(invisible(df))
}
setwd("/Users/jyu/Downloads/circlize/R/")
ls()
dir()
readRDS("circlize.rdb")
readRDS
?readRDS
readRDS(file="circlize.rdb")
readRDS(file="circlize.rdb")
readRDS(file="circlize.rdx")
func <- readRDS(file="circlize.rdx")
func$$variables$chordDiagramFromMatrix
length(func)
func[[1]]
func[[1]]$uy
install.packages("shiny")
variants <- read.table("retained_variants_allsamples.txt", header=T)
dir()
setwd("/Users/jyu/Documents/Projects/Shiny")
library(circlize)
variants <- read.table("retained_variants_allsamples.txt", header=T)
setwd("/Users/jyu/Documents/Projects/Shiny/SampleSwitch")
variants <- read.table("retained_variants_allsamples.txt", header=T)
variants <- read.table("retained_variants_allsamples.txt", header=Tï¼Œ fill=T)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T)
?read.table
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, row.names = NULL)
head(variants)
head(variants)$exon_rank
variants[1:5,1:10]
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=F, row.names = NULL)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, row.names = NULL)
variants[1:5,1:5]
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, row.names = 1)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, row.names = 10)
variants <- read.table(pipe("awk 'NR >1{$1=\"\"}1' retained_variants_allsamples.txt"), header=T, fill=F, row.names = NULL, stringsAsFactors=FALSE)
variants <- read.table(pipe("awk 'NR >1{$1=\"\"}1' retained_variants_allsamples.txt"), header=T, fill=T, stringsAsFactors=FALSE)
variants[1:5,1:5]
getwd()
variants <- read.table(pipe("awk 'NR >1{$1=\"\"}1' retained_variants_allsamples.txt"), header=T, fill=F, stringsAsFactors=FALSE)
variants <- read.table(pipe("awk 'NR >1{$1=\"\"}1' retained_variants_allsamples.txt"), header=T, fill=T, stringsAsFactors=FALSE)
variants
variants[1:5,1:5]
variants <- read.table(pipe("awk 'NR >1{$1=\"\"}1' retained_variants_allsamples.txt"), header=T, fill=T, stringsAsFactors=FALSE, row.names = NULL)
variants[1:5,1:5]
variants <- read.table(pipe("awk 'NR >1{$1=NR}1' retained_variants_allsamples.txt"), header=T, fill=T, stringsAsFactors=FALSE, row.names = NULL)
variants[1:5,1:5]
variants <- read.table(pipe("awk 'NR >1{$1=NR}1' retained_variants_allsamples.txt"), header=T, fill=T, stringsAsFactors=FALSE)
variants <- read.table(pipe("awk 'NR >1{$1=NR; print $0}' retained_variants_allsamples.txt"), header=T, fill=T, stringsAsFactors=FALSE)
variants <- read.table(pipe("awk '{if (NR >1) {$1=NR; print $0} else {print $0}}' retained_variants_allsamples.txt"), header=T, fill=T, stringsAsFactors=FALSE, row.names = NULL)
variants[1:5,1:5]
variants <- read.table(pipe("awk '{if (NR >1) {$1=NR; print $0} else {print $0}}' retained_variants_allsamples.txt"), header=T, fill=T, stringsAsFactors=FALSE)
variants <- read.table(pipe("awk '{if (NR >1) {$1=NR; print $0} else {print $0}}' retained_variants_allsamples.txt"), header=T, fill=T)
variants <- read.table(pipe("awk '{OFS="\t"; if (NR >1) {$1=NR}; print $0}' retained_variants_allsamples.txt"), header=T, fill=T)
variants <- read.table(pipe("awk '{OFS='\t'; if (NR >1) {$1=NR}; print $0}' retained_variants_allsamples.txt"), header=T, fill=T)
variants <- read.table(pipe("awk '{OFS=\"\t\"; if (NR >1) {$1=NR}; print $0}' retained_variants_allsamples.txt"), header=T, fill=T)
variants <- read.table(pipe("awk '{OFS=\"\t\"; if (NR >1) {$1=NR}; print $0}' retained_variants_allsamples.txt"), header=T, fill=T)
file.in <- "retained_variants_allsamples.txt"
addrowname.cmd <- paste("awk '{OFS="\t"; if (NR >1) {$1=NR}; print $0}' ", file.in, sep="")
file.in
variants <- read.table(pipe("awk -v OFS='\t' '{if (NR >1) {$1=NR}; print $0}' retained_variants_allsamples.txt"), header=T, fill=T)
addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR}; print $0}' ", file.in, sep="")
addrowname.cmd
addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
addrowname.cmd
addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
system(addrowname.cmd)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, stringsAsFactors=FALSE)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, stringsAsFactors=FALSE, row.names = "ID")
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, stringsAsFactors=FALSE, row.names = NULL)
variants[1:5,1:5]
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, stringsAsFactors=FALSE, row.names = 1)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, stringsAsFactors=FALSE, row.names = 1)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=F)
variants <- read.table("retained_variants_allsamples.txt", header=T)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, sep="\t")
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, sep="\t", quote=F)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, sep="\t", quote="")
variants[1:5,1:5]
head(variants)
variants[1:5,]$protein
file.in <- "retained_variants_allsamples.txt"
addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
system(addrowname.cmd)
addrowname.cmd <- paste("awk -v OFS='\t' '{OFS="\t"; if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
addrowname.cmd <- paste("awk -v OFS='\t' '{OFS=\"\t\"; if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
addrowname.cmd
system(addrowname.cmd)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, sep="\t", quote="")
addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
system(addrowname.cmd)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, sep="\t", quote="")
getwd()
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, sep="\t", quote="", row.names=NULL)
variants[1:5, 1:5]
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, sep="\t", quote="")
addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
getwd()
?read.table
addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
system(addrowname.cmd)
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, quote="")
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, quote="", sep="\t")
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, quote="", sep="\t", row.names=NULL)
variants[1:5, 1:5]
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, sep="\t", quote="")
variants[1:5, 1:5]
variants[1:5, 1:15]
head(variants)
file.in <- "retained_variants_allsamples.txt"
#addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
#system(addrowname.cmd)
variants <- read.table(file.in, header=T, fill=T, sep="\t", quote="")
file.in <- "retained_variants_allsamples.txt"
#addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
#system(addrowname.cmd)
variants <- read.table(file.in, header=T, fill=T, sep="\t", quote="")
colnames(variants)
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN
nrow(variants.FN )
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")]
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref <- ""; variants.FN.cor$alt <- "";
variants.FN.cor
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
x=1
variants.FN[x, "X.chromosome"]
?grep
grep("1", 1:10)
grep("1", 1:10, fixed=T)
grep("1", 1:10, fixed=TRUE)
grep(1, 1:10, fixed=TRUE)
sapply(1 : nrow(variants.FN.cor) function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
j=1
variants.EV[j, "start"]
variants.EV[j, "start"] + offset
variants$start <- as.integer(variants$start)
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.EV[j, "start"]
offset
offset = 10
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.FN.cor
variants.EV[j, "start"]
variants.EV[j, "ref"]
?read.table
variants$sample
variants$sample <- as.character(variants$sample)
variants$ref <- as.character(variants$ref)
variants$alt <- as.character(variants$alt)
variants <- read.table(file.in, header=T, fill=T, sep="\t", quote="")
variants$start <- as.integer(variants$start)
variants$sample <- as.character(variants$sample)
variants$ref <- as.character(variants$ref)
variants$alt <- as.character(variants$alt)
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.FN.cor
variants[grep("41258557", variants$start),]
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"]
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.FN.cor
variants[grep("412090", variants$start),]
sort(unique(unique(variants$sample)))
variants.FN.cor
variants.FN.cor$sample_new
ss <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
ss
colnames(variants)
variants.FN.cor <- variants.FN[, c("gene", "X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
ss <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
ss
variants.FN.cor <- variants.FN[, c("gene", "X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
ss <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
ss
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- ""; variants.FN.cor$sample_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
ss <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
ss
variants.FN.cor
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
ss.output <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
chordDiagram(ss.plot, directional = 1, direction.type = "arrows")
?chordDiagram
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack="")
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack="name")
?chordDiagram
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid")
)
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
col_fun = colorRamp2(c(-1, 0, 1), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"), col=col_fun(1:nrow(ss.plot)))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"), col=col_fun(1:nrow(ss.plot)))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"), col=col_fun(1:nrow(ss.plot)))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"), col=col_fun(1:nrow(ss.plot)))
?chordDiagram
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), row.col = col_fun(nrow(ss.plot) : 1))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), row.col = col_fun(nrow(ss.plot) : 1))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), row.col = col_fun(nrow(ss.plot) : 1))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), row.col = col_fun(nrow(ss.plot) : 1))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), row.col = col_fun(nrow(ss.plot) : 1))
?chordDiagram
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), grid.col = col_fun(nrow(ss.plot) : 1))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), column.col = col_fun(nrow(ss.plot) : 1))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), column.col = col_fun(nrow(ss.plot) : 1))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), column.col = col_fun(nrow(ss.plot) : 1))
