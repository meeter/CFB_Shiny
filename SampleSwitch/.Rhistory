#addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
#system(addrowname.cmd)
variants <- read.table(file.in, header=T, fill=T, sep="\t", quote="")
file.in <- "retained_variants_allsamples.txt"
#addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
#system(addrowname.cmd)
variants <- read.table(file.in, header=T, fill=T, sep="\t", quote="")
colnames(variants)
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN
nrow(variants.FN )
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")]
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref <- ""; variants.FN.cor$alt <- "";
variants.FN.cor
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
x=1
variants.FN[x, "X.chromosome"]
?grep
grep("1", 1:10)
grep("1", 1:10, fixed=T)
grep("1", 1:10, fixed=TRUE)
grep(1, 1:10, fixed=TRUE)
sapply(1 : nrow(variants.FN.cor) function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
j=1
variants.EV[j, "start"]
variants.EV[j, "start"] + offset
variants$start <- as.integer(variants$start)
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.EV[j, "start"]
offset
offset = 10
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.FN.cor
variants.EV[j, "start"]
variants.EV[j, "ref"]
?read.table
variants$sample
variants$sample <- as.character(variants$sample)
variants$ref <- as.character(variants$ref)
variants$alt <- as.character(variants$alt)
variants <- read.table(file.in, header=T, fill=T, sep="\t", quote="")
variants$start <- as.integer(variants$start)
variants$sample <- as.character(variants$sample)
variants$ref <- as.character(variants$ref)
variants$alt <- as.character(variants$alt)
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.FN.cor
variants[grep("41258557", variants$start),]
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"]
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
variants.FN.cor
variants[grep("412090", variants$start),]
sort(unique(unique(variants$sample)))
variants.FN.cor
variants.FN.cor$sample_new
ss <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
ss
colnames(variants)
variants.FN.cor <- variants.FN[, c("gene", "X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
ss <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
ss
variants.FN.cor <- variants.FN[, c("gene", "X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$sample_new <- ""; variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
ss <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
ss
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- ""; variants.FN.cor$sample_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
ss <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
ss
variants.FN.cor
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
ss.output <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
chordDiagram(ss.plot, directional = 1, direction.type = "arrows")
?chordDiagram
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack="")
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack="name")
?chordDiagram
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid")
)
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"))
col_fun = colorRamp2(c(-1, 0, 1), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"), col=col_fun(1:nrow(ss.plot)))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"), col=col_fun(1:nrow(ss.plot)))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"), col=col_fun(1:nrow(ss.plot)))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack=c("name", "grid"), col=col_fun(1:nrow(ss.plot)))
?chordDiagram
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), row.col = col_fun(nrow(ss.plot) : 1))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), row.col = col_fun(nrow(ss.plot) : 1))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), row.col = col_fun(nrow(ss.plot) : 1))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), row.col = col_fun(nrow(ss.plot) : 1))
col_fun = colorRamp2(c(1, nrow(ss.plot)/2, nrow(ss.plot)), c("green", "white", "red"))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), row.col = col_fun(nrow(ss.plot) : 1))
?chordDiagram
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), grid.col = col_fun(nrow(ss.plot) : 1))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), column.col = col_fun(nrow(ss.plot) : 1))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), column.col = col_fun(nrow(ss.plot) : 1))
chordDiagram(ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.plot)), column.col = col_fun(nrow(ss.plot) : 1))
library(markdown)
install.packages("markdown")
install.packages("shinythemes")
library(shiny)
library(shinythemes)
library(circlize)
library(markdown)
runApp()
runApp()
sample_switch <- function(file.in, offset) {
#file.in <- "retained_variants_allsamples.txt"; offset = 10
#addrowname.cmd <- paste("awk -v OFS='\t' '{if (NR >1) {$1=NR-1}; print $0}' ", file.in, ">tmp.txt && mv tmp.txt ", file.in, sep="")
#system(addrowname.cmd)
variants <- read.table(file.in, header=T, fill=T, sep="\t", quote="")
variants$start <- as.integer(variants$start)
variants$sample <- as.character(variants$sample)
variants$ref <- as.character(variants$ref)
variants$alt <- as.character(variants$alt)
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN.cor <- variants.FN[, c("X.chromosome", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- ""; variants.FN.cor$sample_new <- "";
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "X.chromosome"] == variants.EV[j, "X.chromosome"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
#####Output Sample Switch Table
ss.output <- subset(variants.FN.cor, sample != sample_new & sample_new != "")
#####Output Sample Switch Plot
ss.plot <- ss.output[, c("sample", "sample_new")]
ss.plot$value <- 1
return(list(ss.output = ss.output, ss.plot = ss.plot))
}
sample_switch("/Users/jyu/Documents/Projects/Shiny/SampleSwitch/retained_variants_allsamples.txt", 10)
file1
file1="/Users/jyu/Documents/Projects/Shiny/SampleSwitch/retained_variants_allsamples.txt"
ss.lst <- sample_switch(file1, 10)
col_fun = colorRamp2(c(1, nrow(ss.lst$ss.plot)/2, nrow(ss.lst$ss.plot)), c("green", "white", "red"))
chordDiagram(ss.lst$ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.lst$ss.plot)))
chordDiagram(ss.lst$ss.plot, directional = 1, direction.type = "arrows", annotationTrack = c("name", "grid"),
col=col_fun(1 : nrow(ss.lst$ss.plot)))
tabPanel("Sample Switch",
fluidRow(column(3,
wellPanel(
fileInput("file1", "Choose retained_variants_allsamples.txt",
accept = c("text/txt", "text/tab-separated-values,text/plain", ".txt")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
)
)),
column(9,
tabsetPanel(
tabPanel("Data Table", dataTableOutput("Data"))
))
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose retained variant table",
multiple = TRUE),
# Horizontal line ----
tags$hr(),
# Input: Maxium Distance Allowed ----
sliderInput("offset", "Maxium Distance Allowed:",
min = 1, max = 20, value = 10
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("ss_data")
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(variants)
setwd()
getwd()
variants <- read.table("retained_variants_allsamples.txt", header=T, fill=T, sep="\t", quote="")
colnames(variants)
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(variants)[7] <- "chr"
variants$start <- as.integer(variants$start)
variants$sample <- as.character(variants$sample)
variants$ref <- as.character(variants$ref)
variants$alt <- as.character(variants$alt)
variants.FN <- subset(variants, tag == "FN")
variants.EV <- subset(variants, tag == "EV")
variants.FN.cor <- variants.FN[, c("chr", "start", "ref", "alt", "sample")] ###Create a dataframe for corrected FN
variants.FN.cor$start_new <- ""; variants.FN.cor$ref_new <- ""; variants.FN.cor$alt_new <- ""; variants.FN.cor$sample_new <- "";
system.time(sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "chr"] == variants.EV[j, "chr"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
}))
offset=20
sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "chr"] == variants.EV[j, "chr"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
})
system.time(sapply(1 : nrow(variants.FN.cor), function(i) {
for (j in 1 : nrow(variants.EV))
{
if (variants.FN[i, "chr"] == variants.EV[j, "chr"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
}
}))
sapply(1 : nrow(variants.FN.cor), function(i) {
sapply (j : nrow(variants.EV), function(j) {
if (variants.FN[i, "chr"] == variants.EV[j, "chr"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
})
})
sapply(1 : nrow(variants.FN.cor), function(i) {
sapply (1 : nrow(variants.EV), function(j) {
if (variants.FN[i, "chr"] == variants.EV[j, "chr"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
})
})
variants.FN.cor
system.time(sapply(1 : nrow(variants.FN.cor), function(i) {
sapply (1 : nrow(variants.EV), function(j) {
if (variants.FN[i, "chr"] == variants.EV[j, "chr"] & variants.FN[i, "sample"] != variants.EV[j, "sample"] &
variants.FN[i, "start"] <= variants.EV[j, "start"] + offset & variants.FN[i, "start"] >= variants.EV[j, "start"] - offset)
{variants.FN.cor[i, "start_new"] <<- variants.EV[j, "start"]
variants.FN.cor[i, "ref_new"] <<- variants.EV[j, "ref"]
variants.FN.cor[i, "alt_new"] <<- variants.EV[j, "alt"]
variants.FN.cor[i, "sample_new"] <<- variants.EV[j, "sample"]
}
})
}))
runApp()
runApp()
runApp()
